const { DoctorSchedule, Appointment, Doctor, Patient } = require('../models/models');
const ApiError = require('../error/ApiError');

class DoctorScheduleController {
  // –£—Å—ñ —Ä–æ–∑–∫–ª–∞–¥–∏ –ª—ñ–∫–∞—Ä—ñ–≤ (–ª–∏—à–µ Admin)
  async getAll(req, res, next) {
    try {
      if (req.user.role !== 'Admin') {
        return next(ApiError.forbidden('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'));
      }

      const schedules = await DoctorSchedule.findAll({ include: Doctor });
      return res.json(schedules);
    } catch (e) {
      console.error('getAll error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤'));
    }
  }

  // –†–æ–∑–∫–ª–∞–¥ –∑–∞ –ª—ñ–∫–∞—Ä–Ω–µ—é
  async getByHospital(req, res, next) {
    try {
      const { hospitalId } = req.params;
      const schedules = await DoctorSchedule.findAll({
        include: {
          model: Doctor,
          where: { hospital_id: hospitalId },
        },
      });
      return res.json(schedules);
    } catch (e) {
      console.error('getByHospital error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥–∏ –ª—ñ–∫–∞—Ä–Ω—ñ'));
    }
  }

  // –†–æ–∑–∫–ª–∞–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª—ñ–∫–∞—Ä—è
  async getByDoctor(req, res, next) {
    try {
      const { doctorId } = req.params;

      if (req.user.role === 'Doctor') {
        const doctor = await Doctor.findOne({ where: { user_id: req.user.id } });
        if (!doctor || doctor.id !== parseInt(doctorId)) {
          return next(ApiError.forbidden('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á—É–∂–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É'));
        }
      }

      const schedules = await DoctorSchedule.findAll({ where: { doctor_id: doctorId } });
      return res.json(schedules);
    } catch (e) {
      console.error('getByDoctor error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –ª—ñ–∫–∞—Ä—è'));
    }
  }

  // –†–æ–∑–∫–ª–∞–¥ –ª—ñ–∫–∞—Ä—è –Ω–∞ –¥–µ–Ω—å (–ø—É–±–ª—ñ—á–Ω–∏–π)
  async getByDoctorAndDate(req, res, next) {
    try {
      const { doctorId, date } = req.params;
      if (!doctorId || !date) return next(ApiError.badRequest("–ü–æ—Ç—Ä—ñ–±–Ω—ñ doctorId —ñ date"));

      const schedules = await DoctorSchedule.findAll({
        where: {
          doctor_id: doctorId,
          appointment_date: date,
        },
      });

      return res.json(schedules);
    } catch (e) {
      console.error("getByDoctorAndDate error:", e);
      return next(ApiError.internal("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –¥–∞—Ç—É"));
    }
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è (Admin)
  async create(req, res, next) {
    try {
      if (req.user.role !== 'Admin') {
        return next(ApiError.forbidden('–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥'));
      }

      const created = await DoctorSchedule.create(req.body);
      return res.json(created);
    } catch (e) {
      console.error('create error:', e);
      return next(ApiError.badRequest('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥'));
    }
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è (Admin)
  async update(req, res, next) {
    try {
      if (req.user.role !== 'Admin') {
        return next(ApiError.forbidden('–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥'));
      }

      const item = await DoctorSchedule.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound('–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

      await item.update(req.body);
      return res.json(item);
    } catch (e) {
      console.error('update error:', e);
      return next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É'));
    }
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è (Admin)
  async delete(req, res, next) {
    try {
      if (req.user.role !== 'Admin') {
        return next(ApiError.forbidden('–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥'));
      }

      const item = await DoctorSchedule.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound('–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

      await item.destroy();
      return res.json({ message: '–†–æ–∑–∫–ª–∞–¥ –≤–∏–¥–∞–ª–µ–Ω–æ' });
    } catch (e) {
      console.error('delete error:', e);
      return next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É'));
    }
  }

  // üü¢ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–ª–æ—Ç–∞
  async bookSchedule(req, res, next) {
    try {
      const { scheduleId } = req.params;
  
      const schedule = await DoctorSchedule.findByPk(scheduleId);
      if (!schedule) return next(ApiError.notFound('–ß–∞—Å —Ä–æ–∑–∫–ª–∞–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
  
      if (schedule.is_booked) {
        return next(ApiError.badRequest('–¶–µ–π —á–∞—Å –≤–∂–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏–π'));
      }
  
      let patient;
      if (req.user.role === 'Patient') {
        patient = await Patient.findOne({ where: { user_id: req.user.id } });
        if (!patient) return next(ApiError.forbidden('–ü–∞—Ü—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
      } else if (req.body.patient_id) {
        patient = await Patient.findByPk(req.body.patient_id);
        if (!patient) return next(ApiError.badRequest('–ù–µ–≤—ñ—Ä–Ω–∏–π patient_id'));
      } else {
        return next(ApiError.badRequest('–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞'));
      }
  
      const appointment = await Appointment.create({
        patient_id: patient.id,
        doctor_id: schedule.doctor_id,
        doctor_schedule_id: schedule.id,
        appointment_date: schedule.appointment_date,
        status: 'Scheduled'
      });
  
      await schedule.update({ is_booked: true });
  
      return res.json({
        message: '–ß–∞—Å —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ',
        appointment
      });
    } catch (e) {
      console.error('bookSchedule error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∞—Å'));
    }
  }  
}

module.exports = new DoctorScheduleController();
