const { Appointment, Doctor, Patient, DoctorSchedule } = require('../models/models');
const ApiError = require('../error/ApiError');
const { Op } = require('sequelize');

class AppointmentController {
  // üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ (—Ç—ñ–ª—å–∫–∏ Admin)
  async getAll(req, res, next) {
    try {
      if (req.user.role !== 'Admin') {
        return next(ApiError.forbidden('–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏'));
      }

      const appointments = await Appointment.findAll({
        include: [Doctor, Patient, DoctorSchedule]
      });

      return res.json(AppointmentController._mapStatus(appointments));
    } catch (e) {
      console.error('getAll error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Å–∏'));
    }
  }

  // üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Å –ø–æ ID (–ø–∞—Ü—ñ—î–Ω—Ç –º–æ–∂–µ —Ç—ñ–ª—å–∫–∏ —Å–≤—ñ–π)
  async getById(req, res, next) {
    try {
      const id = req.params.id;
      const appointment = await Appointment.findByPk(id, {
        include: [Doctor, Patient, DoctorSchedule]
      });

      if (!appointment) return next(ApiError.notFound('–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

      if (req.user.role === 'Patient') {
        const patient = await Patient.findOne({ where: { user_id: req.user.id } });
        if (!patient || patient.id !== appointment.patient_id) {
          return next(ApiError.forbidden('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á—É–∂–æ–≥–æ –∑–∞–ø–∏—Å—É'));
        }
      }

      return res.json(AppointmentController._mapStatus([appointment])[0]);
    } catch (e) {
      console.error('getById error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Å'));
    }
  }
  
// ‚úÖ Create appointment ‚Äî only doctor_schedule_id is required to get the date
async create(req, res, next) {
    try {
      const { patient_id, doctor_id, doctor_schedule_id, status, notes } = req.body;
  
      if (!patient_id || !doctor_id || !doctor_schedule_id) {
        return next(ApiError.badRequest('Required fields: patient_id, doctor_id, doctor_schedule_id'));
      }
  
      // üîé Get schedule
      const schedule = await DoctorSchedule.findByPk(doctor_schedule_id);
      if (!schedule) return next(ApiError.notFound('Doctor schedule not found'));
  
      // üîê Ensure the slot is available
      if (schedule.is_booked) {
        return next(ApiError.badRequest('This time slot is already booked'));
      }
  
      // üìÖ Use date from schedule automatically
      const appointment_date = schedule.appointment_date;
  
      // ‚úÖ Create appointment
      const created = await Appointment.create({
        patient_id,
        doctor_id,
        doctor_schedule_id,
        appointment_date,
        status: status || 'Scheduled',
        notes: notes || null,
      });
  
      // üîÅ Update schedule as booked
      await schedule.update({ is_booked: true });
  
      return res.json(created);
    } catch (e) {
      console.error('create error:', e);
      return next(ApiError.internal('Failed to create appointment'));
    }
  }  
  
  // üîÅ –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å (Admin, Doctor)
  async update(req, res, next) {
    try {
      if (!['Admin', 'Doctor'].includes(req.user.role)) {
        return next(ApiError.forbidden('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É'));
      }

      const appointment = await Appointment.findByPk(req.params.id);
      if (!appointment) return next(ApiError.notFound('–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

      await appointment.update(req.body);
      return res.json(appointment);
    } catch (e) {
      console.error('update error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å'));
    }
  }

  // ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å (—Ç—ñ–ª—å–∫–∏ –ø–∞—Ü—ñ—î–Ω—Ç ‚Äî —Å–≤—ñ–π –∞–±–æ –∞–¥–º—ñ–Ω)
  async cancel(req, res, next) {
    try {
      const appointment = await Appointment.findByPk(req.params.id);
      if (!appointment) return next(ApiError.notFound('–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

      if (req.user.role === 'Patient') {
        const patient = await Patient.findOne({ where: { user_id: req.user.id } });
        if (!patient || patient.id !== appointment.patient_id) {
          return next(ApiError.forbidden('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á—É–∂–æ–≥–æ –∑–∞–ø–∏—Å—É'));
        }
      }

      appointment.status = 'Cancelled';
      await appointment.save();
      await DoctorSchedule.update({ is_booked: false }, { where: { id: appointment.doctor_schedule_id } });

      return res.json({ message: '–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ' });
    } catch (e) {
      console.error('cancel error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å'));
    }
  }

  // üîç –í—Å—ñ –∑–∞–ø–∏—Å–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞ (–ø–∞—Ü—ñ—î–Ω—Ç ‚Äî —Å–≤–æ—ó, –ª—ñ–∫–∞—Ä/–∞–¥–º—ñ–Ω ‚Äî –±—É–¥—å-—è–∫—ñ)
  async getByPatient(req, res, next) {
    try {
      const { patientId } = req.params;

      if (req.user.role === 'Patient') {
        const patient = await Patient.findOne({ where: { user_id: req.user.id } });
        if (!patient || patient.id !== parseInt(patientId)) {
          return next(ApiError.forbidden('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á—É–∂–∏—Ö –∑–∞–ø–∏—Å—ñ–≤'));
        }
      }

      const items = await Appointment.findAll({
        where: { patient_id: patientId },
        include: [Doctor, DoctorSchedule]
      });

      return res.json(AppointmentController._mapStatus(items));
    } catch (e) {
      console.error('getByPatient error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞'));
    }
  }

  // üîç –í—Å—ñ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª—ñ–∫–∞—Ä—è
  async getByDoctor(req, res, next) {
    try {
      const { doctorId } = req.params;

      if (req.user.role === 'Doctor') {
        const doctor = await Doctor.findOne({ where: { user_id: req.user.id } });
        if (!doctor || doctor.id !== parseInt(doctorId)) {
          return next(ApiError.forbidden('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É'));
        }
      }

      const appointments = await Appointment.findAll({
        where: { doctor_id: doctorId },
        include: [Patient, DoctorSchedule]
      });

      return res.json(AppointmentController._mapStatus(appointments));
    } catch (e) {
      console.error('getByDoctor error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ –ª—ñ–∫–∞—Ä—è'));
    }
  }

  // –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å "–ú–∏–Ω—É–ª–∏–π" —è–∫—â–æ –¥–∞—Ç–∞ < —Å—å–æ–≥–æ–¥–Ω—ñ
  static _mapStatus(list) {
    const now = new Date();
    return list.map(item => {
      const date = new Date(item.appointment_date);

      let status;
      if (item.status === 'Cancelled') {
        status = 'Cancelled';
      } else if (date < now) {
        status = 'Past';
      } else {
        status = 'Scheduled';
      }

      return { ...item.toJSON(), computed_status: status };
    });
  }
}

module.exports = new AppointmentController();
