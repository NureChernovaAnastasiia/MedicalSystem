const { LabTest, Patient, Doctor, LabTestSchedule, HospitalLabService, LabTestInfo } = require('../models/models');
const ApiError = require('../error/ApiError');
const PDFDocument = require('pdfkit');
const path = require('path');

class LabTestController {
  async getAll(req, res, next) {
    try {
      const items = await LabTest.findAll({ include: [Patient, Doctor, LabTestSchedule] });
      return res.json(items);
    } catch (e) {
      console.error('getAll error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª—ñ–∑—ñ–≤'));
    }
  }

  async getById(req, res, next) {
    try {
      const item = await LabTest.findByPk(req.params.id, {
        include: [Patient, Doctor, LabTestSchedule],
      });
      if (!item) return next(ApiError.notFound('–ê–Ω–∞–ª—ñ–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
      return res.json(item);
    } catch (e) {
      console.error('getById error:', e);
      return next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É'));
    }
  }

  async getByPatient(req, res, next) {
    try {
      const { patientId } = req.params;
      const items = await LabTest.findAll({
        where: { patient_id: patientId },
        include: [Doctor, LabTestSchedule],
      });
      return res.json(items);
    } catch (e) {
      console.error('getByPatient error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞'));
    }
  }

  async getByPatientStatus(req, res, next) {
    try {
      const { patientId, is_ready } = req.query;
      if (typeof is_ready === 'undefined') {
        return next(ApiError.badRequest('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ is_ready (true/false)'));
      }

      const items = await LabTest.findAll({
        where: { patient_id: patientId },
        include: [
          {
            model: LabTestSchedule,
            include: {
              model: HospitalLabService,
              include: [LabTestInfo],
            },
          },
        ],
      });

      const filtered = items.filter(test =>
        test.LabTestSchedule?.HospitalLabService?.LabTestInfo?.is_ready === (is_ready === 'true')
      );

      return res.json(filtered);
    } catch (e) {
      console.error('getByPatientStatus error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º'));
    }
  }

  async create(req, res, next) {
    try {
      const created = await LabTest.create(req.body);
      return res.json(created);
    } catch (e) {
      console.error('create error:', e);
      return next(ApiError.badRequest('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑'));
    }
  }

  async update(req, res, next) {
    try {
      const item = await LabTest.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound('–ê–Ω–∞–ª—ñ–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
      await item.update(req.body);
      return res.json(item);
    } catch (e) {
      console.error('update error:', e);
      return next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É'));
    }
  }

  async delete(req, res, next) {
    try {
      const item = await LabTest.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound('–ê–Ω–∞–ª—ñ–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
      await item.destroy();
      return res.json({ message: '–ê–Ω–∞–ª—ñ–∑ –≤–∏–¥–∞–ª–µ–Ω–æ' });
    } catch (e) {
      console.error('delete error:', e);
      return next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É'));
    }
  }

  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—É
  async downloadPDF(req, res, next) {
    try {
      const { id } = req.params;
      const labTest = await LabTest.findByPk(id, {
        include: [Patient, Doctor],
      });

      if (!labTest) {
        return next(ApiError.notFound('–ê–Ω–∞–ª—ñ–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
      }

      const doc = new PDFDocument();
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `inline; filename=lab-test-${id}.pdf`);
      doc.pipe(res);

      // üî§ –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —à—Ä–∏—Ñ—Ç
      doc.registerFont('UkrainianFont', path.join(__dirname, '../assets/fonts/DejaVuSans.ttf'));
      doc.font('UkrainianFont');

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      doc.fontSize(20).text('–ó–≤—ñ—Ç –ø—Ä–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑', { align: 'center' });
      doc.moveDown();

      // –î–µ—Ç–∞–ª—ñ
      doc.fontSize(12).text(`–ü–∞—Ü—ñ—î–Ω—Ç: ${labTest.Patient?.last_name} ${labTest.Patient?.first_name}`);
      doc.text(`–õ—ñ–∫–∞—Ä: ${labTest.Doctor?.last_name} ${labTest.Doctor?.first_name}`);
      doc.text(`–î–∞—Ç–∞: ${new Date().toLocaleDateString('uk-UA')}`);
      doc.moveDown();

      doc.text('–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:', { underline: true });
      doc.text(labTest.results || '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ');
      doc.moveDown();

      doc.text('–ü—Ä–∏–º—ñ—Ç–∫–∏:', { underline: true });
      doc.text(labTest.notes || '–ë–µ–∑ –ø—Ä–∏–º—ñ—Ç–æ–∫');

      doc.end();
    } catch (e) {
      console.error('downloadPDF error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF'));
    }
  }
}

module.exports = new LabTestController();
