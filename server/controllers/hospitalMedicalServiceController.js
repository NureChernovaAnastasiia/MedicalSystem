const { HospitalMedicalService, Hospital, MedicalServiceInfo, Doctor } = require('../models/models');
const ApiError = require('../error/ApiError');

class HospitalMedicalServiceController {
  // üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑–≤'—è–∑–∫—ñ–≤ –ª—ñ–∫–∞—Ä–µ–Ω—å —ñ –ø–æ—Å–ª—É–≥
  async getAll(req, res, next) {
    try {
      const items = await HospitalMedicalService.findAll({
        include: [Hospital, MedicalServiceInfo, Doctor],
      });
      return res.json(items);
    } catch (e) {
      console.error('getAll error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –ø–æ—Å–ª—É–≥'));
    }
  }

  // üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ—Å–ª—É–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ª—ñ–∫–∞—Ä–Ω—ñ
  async getByHospital(req, res, next) {
    try {
      const { hospitalId } = req.params;
      const items = await HospitalMedicalService.findAll({
        where: { hospital_id: hospitalId },
        include: [MedicalServiceInfo, Doctor],
      });
      return res.json(items);
    } catch (e) {
      console.error('getByHospital error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–ª—É–≥–∏ –¥–ª—è –ª—ñ–∫–∞—Ä–Ω—ñ'));
    }
  }

  // üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ—Å–ª—É–≥–∏ –¥–ª—è –ª—ñ–∫–∞—Ä—è
  async getByDoctor(req, res, next) {
    try {
      const { doctorId } = req.params;
      const items = await HospitalMedicalService.findAll({
        where: { doctor_id: doctorId },
        include: [Hospital, MedicalServiceInfo],
      });
      return res.json(items);
    } catch (e) {
      console.error('getByDoctor error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–ª—É–≥–∏ –ª—ñ–∫–∞—Ä—è'));
    }
  }

  // ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤'—è–∑–æ–∫ (Admin only)
  async create(req, res, next) {
    try {
      if (req.user.role !== 'Admin') {
        return next(ApiError.forbidden('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'));
      }
      const created = await HospitalMedicalService.create(req.body);
      return res.status(201).json(created);
    } catch (e) {
      console.error('create error:', e);
      return next(ApiError.badRequest('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å'));
    }
  }

  // ‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å (Admin only)
  async update(req, res, next) {
    try {
      if (req.user.role !== 'Admin') {
        return next(ApiError.forbidden('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'));
      }
      const item = await HospitalMedicalService.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound('–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

      await item.update(req.body);
      return res.json(item);
    } catch (e) {
      console.error('update error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å'));
    }
  }

  // üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å (Admin only)
  async delete(req, res, next) {
    try {
      if (req.user.role !== 'Admin') {
        return next(ApiError.forbidden('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'));
      }
      const item = await HospitalMedicalService.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound('–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

      await item.destroy();
      return res.json({ message: '–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ' });
    } catch (e) {
      console.error('delete error:', e);
      return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å'));
    }
  }
}

module.exports = new HospitalMedicalServiceController();
