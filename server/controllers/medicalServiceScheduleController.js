const {
  Patient,
  Appointment,
  MedicalServiceSchedule,
  HospitalMedicalService,
  Hospital,
  MedicalServiceInfo,
  Doctor,
  MedicalService,
} = require("../models/models");
const ApiError = require("../error/ApiError");
const moment = require("moment");
const paypalService = require("../services/paypalService");

class MedicalServiceScheduleController {
  // üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä–æ–∑–∫–ª–∞–¥–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä
  async getAll(req, res, next) {
    try {
      const schedules = await MedicalServiceSchedule.findAll({
        include: {
          model: HospitalMedicalService,
          include: [
              Hospital,
            MedicalServiceInfo,
            Doctor,
          ],
        },
        order: [["appointment_date", "ASC"], ["start_time", "ASC"]],
      });

      const formatted = schedules.map((schedule) => {
        const service = schedule.HospitalMedicalService;
        const hospital = service?.Hospital;
        const isPrivate = hospital?.type === "–ü—Ä–∏–≤–∞—Ç–Ω–∞";

        return {
          id: schedule.id,
          date: schedule.appointment_date,
          start_time: schedule.start_time,
          end_time: schedule.end_time,
          is_booked: schedule.is_booked,
          hospital: hospital?.name,
          procedure_name: service?.MedicalServiceInfo?.name,
          doctor: `${service?.Doctor?.first_name || ""} ${service?.Doctor?.last_name || ""}`.trim(),
          ...(isPrivate && {
            procedure_price: service?.MedicalServiceInfo?.price,
          }),
        };
      });

      return res.json(formatted);
    } catch (e) {
      console.error("getAll error:", e);
      return next(ApiError.internal("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä"));
    }
  }

  // üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–∏–Ω —Ä–æ–∑–∫–ª–∞–¥
  async getById(req, res, next) {
    try {
      const item = await MedicalServiceSchedule.findByPk(req.params.id, {
        include: {
          model: HospitalMedicalService,
          include: [
            Hospital,
            MedicalServiceInfo,
            Doctor,
          ],
        },
      });

      if (!item) return next(ApiError.notFound("–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

      const service = item.HospitalMedicalService;
      const isPrivate = service?.Hospital?.type === "–ü—Ä–∏–≤–∞—Ç–Ω–∞";

      return res.json({
        id: item.id,
        date: item.appointment_date,
        start_time: item.start_time,
        end_time: item.end_time,
        is_booked: item.is_booked,
        hospital: service?.Hospital?.name,
        procedure_name: service?.MedicalServiceInfo?.name,
        doctor: `${service?.Doctor?.first_name || ""} ${service?.Doctor?.last_name || ""}`.trim(),
        ...(isPrivate && {
          procedure_price: service?.MedicalServiceInfo?.price,
        }),
      });
    } catch (e) {
      console.error("getById error:", e);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"));
    }
  }

  async bookMedicalService(req, res, next) {
    try {
      const { medical_service_schedule_id, patient_id: bodyPatientId, orderId } = req.body;
      const userId = req.user.id;

      // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂—É –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
      const payment = await paypalService.captureOrder(orderId);
      if (payment.status !== "COMPLETED") {
        return next(ApiError.badRequest("–û–ø–ª–∞—Ç–∞ –Ω–µ –±—É–ª–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞"));
      }

      // 2. –†–æ–∑–∫–ª–∞–¥
      const schedule = await MedicalServiceSchedule.findByPk(medical_service_schedule_id);
      if (!schedule) return next(ApiError.notFound("–†–æ–∑–∫–ª–∞–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));
      if (schedule.is_booked) return next(ApiError.badRequest("–ß–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ"));

      // 3. –ü–∞—Ü—ñ—î–Ω—Ç
      let patientId;
      if (req.user.role === "Patient") {
        const patient = await Patient.findOne({ where: { user_id: req.user.id } });
        if (!patient) return next(ApiError.badRequest("–ü–∞—Ü—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));
        patientId = patient.id;
      } else {
        if (!bodyPatientId) return next(ApiError.badRequest("–ù–µ –≤–∫–∞–∑–∞–Ω–æ patient_id"));
        patientId = bodyPatientId;
      }

      // 4. –õ—ñ–∫–∞—Ä —Ç–∞ –ª—ñ–∫–∞—Ä–Ω—è
      const hospitalService = await HospitalMedicalService.findByPk(schedule.hospital_medical_service_id);
      if (!hospitalService) return next(ApiError.badRequest("–ü–æ—Å–ª—É–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));
      const doctor_id = hospitalService.doctor_id;
      const hospital_id = hospitalService.hospital_id;

      // 5. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
      const appointment = await Appointment.create({
        patient_id: patientId,
        doctor_id,
        medical_service_schedule_id,
        appointment_date: schedule.appointment_date,
        status: "Scheduled",
      });

      await schedule.update({ is_booked: true });

      await MedicalService.create({
        patient_id: patientId,
        doctor_id,
        medical_service_schedule_id,
        is_ready: false,
        results: null,
        notes: null,
      });

      // 6. –ó–∞–ø–∏—Å –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
      await paypalService.saveUsedOrder(payment, "medical", userId, hospital_id);

      return res.json({
        message: "–ü—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏",
        appointment,
      });
    } catch (e) {
      console.error("bookMedicalService error:", e);
      return next(ApiError.internal(e.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø–ª–∞—Ç–∏—Ç–∏ —Ç–∞ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É"));
    }
  }

  // ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥–∏ –ø–æ —à–∞–±–ª–æ–Ω—É
  async create(req, res, next) {
    try {
      if (req.user.role !== "Admin") {
        return next(ApiError.forbidden("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"));
      }

      const { hospital_medical_service_id, start_date, end_date, time_template } = req.body;

      if (!hospital_medical_service_id || !start_date || !end_date || !time_template) {
        return next(ApiError.badRequest("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è"));
      }

      const schedulesToCreate = [];
      let current = moment(start_date);
      const end = moment(end_date);

      while (current.isSameOrBefore(end, "day")) {
        const dayOfWeek = current.format("dddd");
        const template = time_template[dayOfWeek];

        if (template) {
          const { start_time, end_time } = template;
          const slotStart = moment(`${current.format("YYYY-MM-DD")} ${start_time}`, "YYYY-MM-DD HH:mm");
          const slotEndLimit = moment(`${current.format("YYYY-MM-DD")} ${end_time}`, "YYYY-MM-DD HH:mm");

          let slotCurrent = slotStart.clone();
          while (slotCurrent.isBefore(slotEndLimit)) {
            const slotEnd = slotCurrent.clone().add(30, "minutes");
            if (slotEnd.isAfter(slotEndLimit)) break;

            schedulesToCreate.push({
              hospital_medical_service_id,
              appointment_date: current.format("YYYY-MM-DD"),
              start_time: slotCurrent.toDate(),
              end_time: slotEnd.toDate(),
              is_booked: false,
            });

            slotCurrent.add(30, "minutes");
          }
        }

        current.add(1, "day");
      }

      const created = await MedicalServiceSchedule.bulkCreate(schedulesToCreate);
      return res.status(201).json({
        message: `–£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ ${created.length} —Ä–æ–∑–∫–ª–∞–¥—ñ–≤`,
        created,
      });
    } catch (e) {
      console.error("create schedule error:", e);
      return next(ApiError.internal("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä"));
    }
  }

  // ‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏
  async update(req, res, next) {
    try {
      if (!["Admin", "Doctor"].includes(req.user.role)) {
        return next(ApiError.forbidden("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É"));
      }

      const item = await MedicalServiceSchedule.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound("–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

      await item.update(req.body);
      return res.json(item);
    } catch (e) {
      console.error("update error:", e);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É"));
    }
  }

  // üóë –í–∏–¥–∞–ª–∏—Ç–∏
  async delete(req, res, next) {
    try {
      if (!["Admin", "Doctor"].includes(req.user.role)) {
        return next(ApiError.forbidden("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"));
      }

      const item = await MedicalServiceSchedule.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound("–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

      await item.destroy();
      return res.json({ message: "–†–æ–∑–∫–ª–∞–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (e) {
      console.error("delete error:", e);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É"));
    }
  }

  // üîç –ó–∞ –ø–æ—Å–ª—É–≥–æ—é —Ç–∞ –¥–∞—Ç–æ—é
  async getByServiceAndDate(req, res, next) {
    try {
      const { medicalServiceId, date } = req.params;

      if (!medicalServiceId || !date) {
        return next(ApiError.badRequest("–ü–æ—Ç—Ä—ñ–±–Ω—ñ medicalServiceId —ñ date"));
      }

      const schedules = await MedicalServiceSchedule.findAll({
        where: {
          hospital_medical_service_id: medicalServiceId,
          appointment_date: date,
        },
        include: {
          model: HospitalMedicalService,
          include: [
            Hospital,
            MedicalServiceInfo,
            Doctor,
          ],
        },
      });

      return res.json(schedules);
    } catch (e) {
      console.error("getByServiceAndDate error:", e);
      return next(ApiError.internal("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä"));
    }
  }

  // üïí –û—Ç—Ä–∏–º–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ –Ω–∞ –¥–µ–Ω—å
  async getWorkingHoursByDate(req, res, next) {
    try {
      const { hospital_medical_service_id, date } = req.params;

      if (!hospital_medical_service_id || !date) {
        return next(ApiError.badRequest("–ü–æ—Ç—Ä—ñ–±–Ω—ñ hospital_medical_service_id —ñ date"));
      }

      const slots = await MedicalServiceSchedule.findAll({
        where: {
          hospital_medical_service_id,
          appointment_date: date,
        },
        order: [["start_time", "ASC"]],
      });

      if (slots.length === 0) {
        return res.json({
          hospital_medical_service_id,
          date,
          message: "–ù–∞ —Ü–µ–π –¥–µ–Ω—å –Ω–µ–º–∞—î –ø—Ä–æ—Ü–µ–¥—É—Ä",
        });
      }

      return res.json({
        hospital_medical_service_id,
        date,
        start_time: moment(slots[0].start_time).format("HH:mm:ss"),
        end_time: moment(slots[slots.length - 1].end_time).format("HH:mm:ss"),
      });
    } catch (e) {
      console.error("getWorkingHoursByDate error:", e);
      return next(ApiError.internal("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏"));
    }
  }
}

module.exports = new MedicalServiceScheduleController();
