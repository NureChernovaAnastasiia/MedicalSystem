const { MedicalRecord, Prescription, Patient } = require("../models/models");
const ApiError = require("../error/ApiError");

class MedicalRecordController {
  async getAll(req, res, next) {
    try {
      if (req.user.role !== "Doctor" && req.user.role !== "Admin") {
        return next(
          ApiError.forbidden(
            "–¢—ñ–ª—å–∫–∏ –ª—ñ–∫–∞—Ä –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂—É—Ç—å –±–∞—á–∏—Ç–∏ –≤—Å—ñ –º–µ–¥–∏—á–Ω—ñ –∑–∞–ø–∏—Å–∏"
          )
        );
      }

      const items = await MedicalRecord.findAll({ include: [Prescription] });
      return res.json(items);
    } catch (e) {
      console.error("getAll error:", e);
      return next(
        ApiError.internal("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏—á–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
      );
    }
  }

  async getById(req, res, next) {
    try {
      const id = req.params.id;
      const item = await MedicalRecord.findByPk(id, {
        include: [Prescription],
      });
      if (!item) return next(ApiError.notFound("–ú–µ–¥–∏—á–Ω–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

      if (req.user.role === "Patient") {
        const patient = await Patient.findOne({
          where: { user_id: req.user.id },
        });
        if (!patient || patient.id !== item.patient_id) {
          return next(ApiError.forbidden("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á—É–∂–æ–≥–æ –∑–∞–ø–∏—Å—É"));
        }
      }

      return res.json(item);
    } catch (e) {
      console.error("getById error:", e);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–¥–∏—á–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É"));
    }
  }

  async create(req, res, next) {
    try {
      if (req.user.role !== "Doctor" && req.user.role !== "Admin") {
        return next(
          ApiError.forbidden(
            "–¢—ñ–ª—å–∫–∏ –ª—ñ–∫–∞—Ä –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂—É—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Å–∏"
          )
        );
      }

      const created = await MedicalRecord.create(req.body);
      return res.json(created);
    } catch (e) {
      console.error("create error:", e);
      return next(ApiError.badRequest("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–¥–∏—á–Ω–∏–π –∑–∞–ø–∏—Å"));
    }
  }

  async update(req, res, next) {
    try {
      if (req.user.role !== "Doctor" && req.user.role !== "Admin") {
        return next(
          ApiError.forbidden(
            "–¢—ñ–ª—å–∫–∏ –ª—ñ–∫–∞—Ä –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂—É—Ç—å –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Å–∏"
          )
        );
      }

      const item = await MedicalRecord.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound("–ú–µ–¥–∏—á–Ω–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));
      await item.update(req.body);
      return res.json(item);
    } catch (e) {
      console.error("update error:", e);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–¥–∏—á–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É"));
    }
  }

  async delete(req, res, next) {
    try {
      if (req.user.role !== "Doctor" && req.user.role !== "Admin") {
        return next(
          ApiError.forbidden(
            "–¢—ñ–ª—å–∫–∏ –ª—ñ–∫–∞—Ä –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂—É—Ç—å –≤–∏–¥–∞–ª—è—Ç–∏ –∑–∞–ø–∏—Å–∏"
          )
        );
      }

      const item = await MedicalRecord.findByPk(req.params.id);
      if (!item) return next(ApiError.notFound("–ú–µ–¥–∏—á–Ω–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));
      await item.destroy();
      return res.json({ message: "–ú–µ–¥–∏—á–Ω–∏–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (e) {
      console.error("delete error:", e);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥–∏—á–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É"));
    }
  }
  async getPrescriptionsByRecordAndPatient(req, res, next) {
    try {
      const { recordId, patientId } = req.params;

      const medicalRecord = await MedicalRecord.findByPk(recordId, {
        include: [Prescription],
      });

      if (!medicalRecord) {
        return next(ApiError.notFound("–ú–µ–¥–∏—á–Ω–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));
      }

      // üîê –î–æ—Å—Ç—É–ø: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –∑–∞–ø–∏—Å—É
      if (req.user.role === "Patient") {
        const patient = await Patient.findOne({
          where: { user_id: req.user.id },
        });

        if (!patient || patient.id !== parseInt(patientId)) {
          return next(ApiError.forbidden("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á—É–∂–æ–≥–æ –∑–∞–ø–∏—Å—É"));
        }
      }

      if (medicalRecord.patient_id !== parseInt(patientId)) {
        return next(
          ApiError.badRequest("–¶–µ–π –∑–∞–ø–∏—Å –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∫–∞–∑–∞–Ω–æ–º—É –ø–∞—Ü—ñ—î–Ω—Ç—É")
        );
      }

      return res.json(medicalRecord.Prescriptions);
    } catch (e) {
      console.error("getPrescriptionsByRecordAndPatient error:", e);
      return next(ApiError.internal("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏"));
    }
  }
  async getRecordsByPatient(req, res, next) {
    try {
      const { patientId } = req.params;

      // üîê –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –ø–∞—Ü—ñ—î–Ω—Ç, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø
      if (req.user.role === "Patient") {
        const patient = await Patient.findOne({
          where: { user_id: req.user.id },
        });

        if (!patient || patient.id !== parseInt(patientId)) {
          return next(ApiError.forbidden("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á—É–∂–∏—Ö –∑–∞–ø–∏—Å—ñ–≤"));
        }
      }

      const records = await MedicalRecord.findAll({
        where: { patient_id: patientId },
        include: [Prescription],
      });

      return res.json(records);
    } catch (e) {
      console.error("getRecordsByPatient error:", e);
      return next(ApiError.internal("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ–∑–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞"));
    }
  }
}

module.exports = new MedicalRecordController();
