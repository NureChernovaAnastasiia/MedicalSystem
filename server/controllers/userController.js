const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { User, Doctor, Patient } = require("../models/models");
const ApiError = require("../error/ApiError");

const generateJwt = (id, email, role) => {
  if (!process.env.SECRET_KEY) {
    throw new Error("SECRET_KEY is not defined in environment variables");
  }
  return jwt.sign({ id, email, role }, process.env.SECRET_KEY, {
    expiresIn: "24h",
  });
};

class UserController {
  async registration(req, res, next) {
    const { email, password, role, username, hospital_id } = req.body;

    if (!email || !password || !role) {
      return next(ApiError.badRequest("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email, –ø–∞—Ä–æ–ª—å –∞–±–æ —Ä–æ–ª—å"));
    }

    try {
      const existingUser = await User.findOne({ where: { email } });
      if (existingUser) {
        return next(ApiError.badRequest("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î"));
      }

      const userCount = await User.count();

      if (userCount === 0 && role !== "Admin") {
        return next(
          ApiError.forbidden("–ü–µ—Ä—à–∏–º –º–æ–∂–µ –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä")
        );
      }

      if (userCount > 0 && !req.user) {
        return next(ApiError.forbidden("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"));
      }

      const hashPassword = await bcrypt.hash(password, 5);
      const user = await User.create({
        username: username || email,
        email,
        password: hashPassword,
        role,
      });

      // üîÅ –Ø–∫—â–æ —Ä–µ—î—Å—Ç—Ä—É—î—Ç—å—Å—è Doctor ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å —É Doctor
      if (role === "Doctor") {
        if (!hospital_id) {
          return next(
            ApiError.badRequest("–î–ª—è –ª—ñ–∫–∞—Ä—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ hospital_id")
          );
        }

        await Doctor.create({
          user_id: user.id,
          hospital_id,
          first_name: username || email,
          last_name: "",
          middle_name: "",
          email,
        });
      }

      if (role === 'Patient') {
        if (!req.user || (req.user.role !== 'Doctor' && req.user.role !== 'Admin')) {
          return next(ApiError.forbidden('–¢—ñ–ª—å–∫–∏ –ª—ñ–∫–∞—Ä –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞'));
        }
      
        let doctorId;
        if (req.user.role === 'Doctor') {
          const doctor = await Doctor.findOne({ where: { user_id: req.user.id } });
          if (!doctor) return next(ApiError.badRequest('–õ—ñ–∫–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
          doctorId = doctor.id;
        } else if (req.user.role === 'Admin') {
          // –ê–¥–º—ñ–Ω –º–∞—î —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ doctor_id
          doctorId = req.body.doctor_id;
          if (!doctorId) return next(ApiError.badRequest('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ doctor_id'));
        }
      
        const doctor = await Doctor.findByPk(doctorId);
        if (!doctor) return next(ApiError.badRequest('–õ—ñ–∫–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
      
        await Patient.create({
          user_id: user.id,
          doctor_id: doctorId,
          hospital_id: doctor.hospital_id,
          first_name: username || email,
          last_name: '',
          middle_name: '',
          email,
        });
      }      
      const token = generateJwt(user.id, user.email, user.role);
      return res.json({ token });
    } catch (e) {
      console.error("‚ùå registration error:", e.message);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"));
    }
  }

  async login(req, res, next) {
    const { email, password } = req.body;

    try {
      const user = await User.findOne({ where: { email } });
      if (!user) return next(ApiError.badRequest("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

      const isValid = await bcrypt.compare(password, user.password);
      if (!isValid) return next(ApiError.badRequest("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å"));

      const token = generateJwt(user.id, user.email, user.role);
      return res.json({ token });
    } catch (e) {
      console.error("‚ùå login error:", e.message);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É"));
    }
  }

  async check(req, res, next) {
    try {
      const token = generateJwt(req.user.id, req.user.email, req.user.role);
      return res.json({ token, role: req.user.role });
    } catch (e) {
      console.error("‚ùå check error:", e.message);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞"));
    }
  }

  async getUserById(req, res, next) {
    const { id } = req.params;
    try {
      const user = await User.findByPk(id);
      if (!user) return next(ApiError.badRequest("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

      if (req.user.role === "Patient" && req.user.id != id) {
        return next(ApiError.forbidden("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É"));
      }

      return res.json(user);
    } catch (e) {
      console.error("‚ùå getUserById error:", e.message);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"));
    }
  }

  async update(req, res, next) {
    const { id } = req.params;
    const { email, password } = req.body;

    try {
      const user = await User.findByPk(id);
      if (!user) return next(ApiError.badRequest("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

      if (req.user.role === "Patient" && req.user.id != id) {
        return next(ApiError.forbidden("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É"));
      }

      user.email = email || user.email;
      if (password) {
        user.password = await bcrypt.hash(password, 5);
      }

      await user.save();
      return res.json(user);
    } catch (e) {
      console.error("‚ùå update error:", e.message);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"));
    }
  }

  async delete(req, res, next) {
    const { id } = req.params;
    try {
      if (req.user.role !== "Admin") {
        return next(
          ApiError.forbidden("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        );
      }

      const user = await User.findByPk(id);
      if (!user) return next(ApiError.badRequest("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

      await user.destroy();
      return res.json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (e) {
      console.error("‚ùå delete error:", e.message);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"));
    }
  }
}

module.exports = new UserController();
