const { Doctor, Hospital, User } = require('../models/models');
const ApiError = require('../error/ApiError');

class DoctorController {
    async getAll(req, res, next) {
        try {
            const items = await Doctor.findAll({ include: Hospital });
            return res.json(items);
        } catch (e) {
            console.error('getAll error:', e);
            return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ª—ñ–∫–∞—Ä—ñ–≤'));
        }
    }

    async getById(req, res, next) {
        try {
            const item = await Doctor.findByPk(req.params.id, { include: Hospital });
            if (!item) return next(ApiError.notFound('–õ—ñ–∫–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
            return res.json(item);
        } catch (e) {
            console.error('getById error:', e);
            return next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–∫–∞—Ä—è'));
        }
    }

    async create(req, res, next) {
        try {
          // üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
          if (req.user.role !== 'Admin') {
            return next(ApiError.forbidden('–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ª—ñ–∫–∞—Ä—ñ–≤ –≤—Ä—É—á–Ω—É'));
          }
      
          const { email, first_name, last_name, middle_name = '', hospital_id } = req.body;
      
          // üîé –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email
          const user = await User.findOne({ where: { email } });
          if (!user || user.role !== 'Doctor') {
            return next(ApiError.badRequest('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –Ω–µ —î –ª—ñ–∫–∞—Ä–µ–º –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î'));
          }
      
          // üìõ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ª—ñ–∫–∞—Ä –≤–∂–µ —ñ—Å–Ω—É—î
          const existingDoctor = await Doctor.findOne({ where: { user_id: user.id } });
          if (existingDoctor) {
            return next(ApiError.badRequest('–¶–µ–π –ª—ñ–∫–∞—Ä –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ'));
          }
      
          // ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–∫–∞—Ä—è
          const doctor = await Doctor.create({
            user_id: user.id,
            hospital_id,
            first_name,
            last_name,
            middle_name,
            email,
          });
      
          return res.json(doctor);
        } catch (e) {
          console.error('‚ùå create doctor error:', e.message);
          return next(ApiError.internal('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª—ñ–∫–∞—Ä—è'));
        }
      }
      

    async update(req, res, next) {
        try {
            const item = await Doctor.findByPk(req.params.id);
            if (!item) return next(ApiError.notFound('–õ—ñ–∫–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

            const { hospital_id } = req.body;
            if (hospital_id) {
                const hospitalExists = await Hospital.findByPk(hospital_id);
                if (!hospitalExists) {
                    return next(ApiError.badRequest('–í–∫–∞–∑–∞–Ω–∞ –ª—ñ–∫–∞—Ä–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'));
                }
            }

            await item.update(req.body);
            return res.json(item);
        } catch (e) {
            console.error('update error:', e);
            return next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ–∫–∞—Ä—è'));
        }
    }

    async delete(req, res, next) {
        try {
            const item = await Doctor.findByPk(req.params.id);
            if (!item) return next(ApiError.notFound('–õ—ñ–∫–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

            await item.destroy();
            return res.json({ message: '–õ—ñ–∫–∞—Ä—è –≤–∏–¥–∞–ª–µ–Ω–æ' });
        } catch (e) {
            console.error('delete error:', e);
            return next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª—ñ–∫–∞—Ä—è'));
        }
    }
    // Get all doctors by hospital ID
async getByHospital(req, res, next) {
    try {
      const { hospitalId } = req.params;
  
      const hospital = await Hospital.findByPk(hospitalId);
      if (!hospital) {
        return next(ApiError.notFound("–õ—ñ–∫–∞—Ä–Ω—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));
      }
  
      const doctors = await Doctor.findAll({
        where: { hospital_id: hospitalId },
        include: [Hospital],
      });
  
      return res.json(doctors);
    } catch (e) {
      console.error("getByHospital error:", e);
      return next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–∫–∞—Ä—ñ–≤ –ø–æ –ª—ñ–∫–∞—Ä–Ω—ñ"));
    }
  }  
}

module.exports = new DoctorController();
